<!DOCTYPE html>
<html>
<head>
  <title>CrmApp</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <%= csrf_meta_tags %>
  <%= csp_meta_tag %>

  <%= stylesheet_link_tag 'application', media: 'all', 'data-turbo-track': 'reload' %>
  <%= javascript_importmap_tags %>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" />
  <link rel="manifest" href="/manifest.json">

  <meta name="apple-mobile-web-app-capable" content="yes">
  <meta name="mobile-web-app-capable" content="yes">
  <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
</head>

<body>

  <!-- Profile bar with logged-in staff's email -->
  <body class="<%= content_for?(:body_class) ? yield(:body_class) : '' %>">
  <!-- Profile bar with logged-in staff's email -->


  <!-- Flash messages -->
  <div class="main-content">
    <%= render 'shared/flash' %>
    <%= yield %>
  </div>

  <!-- Conditionally render the navbar unless it's the login page -->
  <% unless content_for?(:body_class) && yield(:body_class) == 'login-page' %>
    <nav class="navbar">
      <div class="container-fluid d-flex justify-content-around">
        <%= link_to dashboard_path, class: "nav-link" do %>
          <i class="fas fa-home"></i>
          Home
        <% end %>

        <%= link_to search_clients_path, class: "nav-link" do %>
          <i class="fas fa-search"></i>
          Search
        <% end %>

        <%= link_to new_client_path, class: "nav-link" do %>
          <i class="fas fa-plus-circle"></i>
          New Client
        <% end %>

        <%= link_to appointments_path, class: "nav-link" do %>
          <i class="fas fa-calendar"></i>
          Appointments
        <% end %>

        <%= link_to campaigns_path, class: "nav-link" do %>
          <i class="fas fa-bullhorn"></i>
          Campaigns
        <% end %>
      </div>
    </nav>
  <% end %>

  <!-- Signature Pad Script -->
  <script src="https://cdn.jsdelivr.net/npm/signature_pad@4.0.0/dist/signature_pad.umd.min.js" defer></script>
</body>

<script>
  function bindLoadMoreButton() {
    const loadMoreButton = document.getElementById('load-more');
    const timelineContainer = document.getElementById('timeline-items');
    let isLoading = false; // Prevent multiple requests

    if (loadMoreButton && timelineContainer) {
      loadMoreButton.addEventListener('click', async function(event) {
        event.preventDefault();

        if (isLoading) {
          console.log("Already loading, skipping click event.");
          return; // Prevent multiple requests
        }
        isLoading = true;
        console.log("Setting isLoading to true");

        // Disable the button to prevent multiple clicks
        loadMoreButton.disabled = true;
        console.log("Load More button clicked. Next URL: ", timelineContainer.getAttribute('data-timeline-next-url'));

        const nextUrl = timelineContainer.getAttribute('data-timeline-next-url');

        if (nextUrl) {
          try {
            const token = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
            const response = await fetch(nextUrl, {
              method: 'GET',
              headers: {
                'Accept': 'text/javascript',
                'X-CSRF-Token': token,
              }
            });

            if (response.ok) {
              console.log("Fetching more timeline items from: ", nextUrl);
              const script = await response.text();
              eval(script); // Evaluate and execute the response script

              console.log("Successfully fetched and appended new items.");
              console.log("Updated Timeline Items:", document.getElementById('timeline-items').innerHTML);

              // Check if there are more items to load
              const newNextUrl = timelineContainer.getAttribute('data-timeline-next-url');
              if (!newNextUrl) {
                console.log("No more items to load. Disabling the Load More button.");
                loadMoreButton.disabled = true;
                loadMoreButton.textContent = 'No More Items';
              } else {
                console.log("More items available to load. Re-enabling the Load More button.");
                loadMoreButton.disabled = false;
              }

              // Ensure button is always at the end
              timelineContainer.appendChild(loadMoreButton);
            } else {
              console.error("Failed to load more items:", response.statusText);
              loadMoreButton.disabled = false;
            }
          } catch (error) {
            console.error("Error during fetch:", error);
            loadMoreButton.disabled = false;
          } finally {
            isLoading = false;
            console.log("Setting isLoading to false");
          }
        } else {
          console.log("No next URL found.");
          isLoading = false;
        }
      });
    }
  }

  // Call this function after the Turbo or DOM load to bind the button event
  document.addEventListener('turbo:load', bindLoadMoreButton);
  document.addEventListener('DOMContentLoaded', bindLoadMoreButton);
</script>


</body>
</html>

<!-- Add styles for mobile -->
<style>
#load-more {
  margin: 20px auto;
  display: block;
}

@media (max-width: 600px) {
  #load-more {
    width: 100%;
    text-align: center;
}
</style>